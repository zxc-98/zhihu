<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zxc.zhihu.dao.MessageMapper">
    <resultMap id="BaseResultMap" type="com.zxc.zhihu.model.Message">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="from_id" property="fromId" jdbcType="INTEGER"/>
        <result column="to_id" property="toId" jdbcType="INTEGER"/>
        <result column="created_date" property="createdDate" jdbcType="TIMESTAMP"/>
        <result column="has_read" property="hasRead" jdbcType="INTEGER"/>
        <result column="conversation_id" property="conversationId" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="com.zxc.zhihu.model.Message" extends="BaseResultMap">
        <result column="content" property="content" jdbcType="LONGVARCHAR"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, from_id, to_id, created_date, has_read, conversation_id
    </sql>
    <sql id="Blob_Column_List">
        content
    </sql>
    <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs"
            parameterType="com.zxc.zhihu.model.MessageExample">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from message
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.zxc.zhihu.model.MessageExample">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from message
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from message
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from message
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.zxc.zhihu.model.MessageExample">
        delete from message
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.zxc.zhihu.model.Message">
        insert into message (id, from_id, to_id,
        created_date, has_read, conversation_id,
        content)
        values (#{id,jdbcType=INTEGER}, #{fromId,jdbcType=INTEGER}, #{toId,jdbcType=INTEGER},
        #{createdDate,jdbcType=TIMESTAMP}, #{hasRead,jdbcType=INTEGER}, #{conversationId,jdbcType=VARCHAR},
        #{content,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.zxc.zhihu.model.Message">
        insert into message
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="fromId != null">
                from_id,
            </if>
            <if test="toId != null">
                to_id,
            </if>
            <if test="createdDate != null">
                created_date,
            </if>
            <if test="hasRead != null">
                has_read,
            </if>
            <if test="conversationId != null">
                conversation_id,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="fromId != null">
                #{fromId,jdbcType=INTEGER},
            </if>
            <if test="toId != null">
                #{toId,jdbcType=INTEGER},
            </if>
            <if test="createdDate != null">
                #{createdDate,jdbcType=TIMESTAMP},
            </if>
            <if test="hasRead != null">
                #{hasRead,jdbcType=INTEGER},
            </if>
            <if test="conversationId != null">
                #{conversationId,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.zxc.zhihu.model.MessageExample" resultType="java.lang.Integer">
        select count(*) from message
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update message
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.fromId != null">
                from_id = #{record.fromId,jdbcType=INTEGER},
            </if>
            <if test="record.toId != null">
                to_id = #{record.toId,jdbcType=INTEGER},
            </if>
            <if test="record.createdDate != null">
                created_date = #{record.createdDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.hasRead != null">
                has_read = #{record.hasRead,jdbcType=INTEGER},
            </if>
            <if test="record.conversationId != null">
                conversation_id = #{record.conversationId,jdbcType=VARCHAR},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update message
        set id = #{record.id,jdbcType=INTEGER},
        from_id = #{record.fromId,jdbcType=INTEGER},
        to_id = #{record.toId,jdbcType=INTEGER},
        created_date = #{record.createdDate,jdbcType=TIMESTAMP},
        has_read = #{record.hasRead,jdbcType=INTEGER},
        conversation_id = #{record.conversationId,jdbcType=VARCHAR},
        content = #{record.content,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update message
        set id = #{record.id,jdbcType=INTEGER},
        from_id = #{record.fromId,jdbcType=INTEGER},
        to_id = #{record.toId,jdbcType=INTEGER},
        created_date = #{record.createdDate,jdbcType=TIMESTAMP},
        has_read = #{record.hasRead,jdbcType=INTEGER},
        conversation_id = #{record.conversationId,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.zxc.zhihu.model.Message">
        update message
        <set>
            <if test="fromId != null">
                from_id = #{fromId,jdbcType=INTEGER},
            </if>
            <if test="toId != null">
                to_id = #{toId,jdbcType=INTEGER},
            </if>
            <if test="createdDate != null">
                created_date = #{createdDate,jdbcType=TIMESTAMP},
            </if>
            <if test="hasRead != null">
                has_read = #{hasRead,jdbcType=INTEGER},
            </if>
            <if test="conversationId != null">
                conversation_id = #{conversationId,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.zxc.zhihu.model.Message">
        update message
        set from_id = #{fromId,jdbcType=INTEGER},
        to_id = #{toId,jdbcType=INTEGER},
        created_date = #{createdDate,jdbcType=TIMESTAMP},
        has_read = #{hasRead,jdbcType=INTEGER},
        conversation_id = #{conversationId,jdbcType=VARCHAR},
        content = #{content,jdbcType=LONGVARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.zxc.zhihu.model.Message">
        update message
        set from_id = #{fromId,jdbcType=INTEGER},
        to_id = #{toId,jdbcType=INTEGER},
        created_date = #{createdDate,jdbcType=TIMESTAMP},
        has_read = #{hasRead,jdbcType=INTEGER},
        conversation_id = #{conversationId,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="getConversationList" resultType="com.zxc.zhihu.model.Message">
        SELECT from_id, to_id, content, has_read, conversation_id, created_date,count(id) as id FROM (
        SELECT * FROM message WHERE from_id=#{userId} or to_id=#{userId} order by created_date desc
        ) tt group by conversation_id order by created_date desc limit #{offset}, #{limit};
    </select>
    <select id="getConversationUnreadCount" resultType="int">
        SELECT count(id) FROM message WHERE has_read=0 AND to_id=#{userId} and
        conversation_id=#{conversationId}
    </select>
    <select id="getConversationDetail" resultType="com.zxc.zhihu.model.Message">
        SELECT * FROM message WHERE conversation_id=#{conversationId} order by created_date desc limit
        #{offset},#{limit}

    </select>

    <select id="hasExistMessageByContent" parameterType="string" resultType="int">
        select count(*) from message WHERE content=#{content};
    </select>
</mapper>